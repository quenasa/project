"""
Vulnerability Analysis Service
Calculates the Socio-environmental Vulnerability Index (IVSA)
"""
from datetime import datetime


class VulnerabilityService:
    """Service for vulnerability index calculations"""
    
    def __init__(self, environmental_service, socioeconomic_service, democratic_service):
        """
        Initialize the vulnerability service
        
        Args:
            environmental_service: Environmental data service
            socioeconomic_service: Socioeconomic data service
            democratic_service: Democratic data service
        """
        self.env_service = environmental_service
        self.soc_service = socioeconomic_service
        self.dem_service = democratic_service
    
    def calculate_vulnerability(self, environmental_data, socioeconomic_data, democratic_data):
        """
        Calculate vulnerability index from combined data
        
        Args:
            environmental_data (dict): Environmental indicators
            socioeconomic_data (dict): Socioeconomic indicators
            democratic_data (dict): Democratic participation indicators
            
        Returns:
            dict: Vulnerability assessment with score, level, and color
        """
        # Environmental vulnerability score (0-100)
        env_score = self._calculate_environmental_score(environmental_data)
        
        # Socioeconomic vulnerability score (0-100)
        soc_score = self._calculate_socioeconomic_score(socioeconomic_data)
        
        # Democratic participation score (0-100, inverted)
        dem_score = self._calculate_democratic_score(democratic_data)
        
        # Weighted average (can be adjusted based on research)
        vulnerability_score = (
            env_score * 0.4 +
            soc_score * 0.35 +
            dem_score * 0.25
        )
        
        # Classification
        level, color = self._classify_vulnerability(vulnerability_score)
        
        return {
            "vulnerability_score": round(vulnerability_score, 2),
            "vulnerability_level": level,
            "color": color,
            "factors": {
                "environmental": round(env_score, 2),
                "socioeconomic": round(soc_score, 2),
                "democratic": round(dem_score, 2)
            },
            "timestamp": datetime.now().isoformat()
        }
    
    def _calculate_environmental_score(self, data):
        """Calculate environmental vulnerability score"""
        # Higher pollution = higher vulnerability
        pm25_score = min(data.get('air_quality', {}).get('pm25', 0), 100)
        co2_score = min(data.get('co2_emissions', 0) * 5, 100)
        
        # Lower vegetation = higher vulnerability
        vegetation = data.get('vegetation_coverage', 50)
        vegetation_score = 100 - vegetation
        
        return (pm25_score + co2_score + vegetation_score) / 3
    
    def _calculate_socioeconomic_score(self, data):
        """Calculate socioeconomic vulnerability score"""
        # Higher poverty = higher vulnerability
        return data.get('poverty_index', 0)
    
    def _calculate_democratic_score(self, data):
        """Calculate democratic participation score (inverted)"""
        # Lower participation = higher vulnerability
        participation = data.get('electoral_participation', 50)
        return 100 - participation
    
    def _classify_vulnerability(self, score):
        """
        Classify vulnerability level and assign color
        
        Args:
            score (float): Vulnerability score (0-100)
            
        Returns:
            tuple: (level, color_hex)
        """
        if score >= 60:
            return "high", "#FF4444"  # Red
        elif score >= 35:
            return "medium", "#FFA500"  # Orange
        else:
            return "low", "#44FF44"  # Green
