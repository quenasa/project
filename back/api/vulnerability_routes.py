"""
Vulnerability index API routes
"""
from flask import Blueprint, jsonify
from services.vulnerability_service import VulnerabilityService
from services.environmental_service import EnvironmentalService
from services.socioeconomic_service import SocioeconomicService
from services.democratic_service import DemocraticService

vulnerability_bp = Blueprint('vulnerability', __name__)

# Initialize services
env_service = EnvironmentalService()
soc_service = SocioeconomicService()
dem_service = DemocraticService()
vuln_service = VulnerabilityService(env_service, soc_service, dem_service)


@vulnerability_bp.route('/api/vulnerability')
def calculate_vulnerability():
    """
    Calculate the Socio-environmental Vulnerability Index (IVSA)
    Combines environmental, socioeconomic, and democratic data
    Returns: high, medium, or low vulnerability classification
    
    Coordinates ready for OpenStreetMap visualization
    
    NOTE: Requires all three data sources (environmental, socioeconomic, democratic) to be integrated
    """
    try:
        # TODO: Implement when all data services are integrated
        # 1. Fetch environmental data
        # 2. Fetch socioeconomic data
        # 3. Fetch democratic data
        # 4. Calculate vulnerability index
        
        return jsonify({
            "error": "Not implemented",
            "message": "Vulnerability calculation requires all data sources to be integrated",
            "todo": [
                "Complete environmental data integration",
                "Complete socioeconomic data integration",
                "Complete democratic data integration",
                "Then vulnerability index can be calculated automatically",
                "See API_INTEGRATION_GUIDE.md for details"
            ],
            "calculation_method": {
                "environmental_weight": 0.4,
                "socioeconomic_weight": 0.35,
                "democratic_weight": 0.25,
                "classification": {
                    "high": "score >= 60",
                    "medium": "35 <= score < 60",
                    "low": "score < 35"
                }
            }
        }), 501  # Not Implemented
    except Exception as e:
        return jsonify({"error": str(e)}), 500
